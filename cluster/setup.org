https://fluxcd.io/flux/guides/mozilla-sops/#prerequisites
* Setup SOPS + Flux
** sops binary
*** linux
#+begin_src shell
wget https://github.com/getsops/sops/releases/download/v3.7.3/sops_3.7.3_amd64.deb
dpkg -i sops_*deb
rm sops_*deb
#+end_src
*** mac
#+begin_src shell
brew install gnupg sops
#+end_src
** generate gpg key
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz"
export KEY_NAME="k8s.cloudnative.nz"
export KEY_COMMENT="flux secrets"

gpg --batch --full-generate-key <<EOF
%no-protection
Key-Type: 1
Key-Length: 4096
Subkey-Type: 1
Subkey-Length: 4096
Expire-Date: 0
Name-Comment: ${KEY_COMMENT}
Name-Real: ${KEY_NAME}
EOF
#+end_src

#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz"
export KEY_NAME="k8s.cloudnative.nz"
gpg --list-secret-keys "${KEY_NAME}"
#+end_src

#+end_example
** import into kubernetes
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz"
export KEY_NAME="k8s.cloudnative.nz"
export KEY_FP=$(gpg --list-secret-keys "${KEY_NAME}" | grep SCEAR -A1 | tail -1 | awk '{print $1}')
gpg --export-secret-keys --armor "${KEY_FP}" |
kubectl create secret generic sops-gpg \
--namespace=flux-system \
--from-file=sops.asc=/dev/stdin
#+end_src

#+RESULTS:
#+begin_example
secret/sops-gpg created
#+end_example
** export key into git
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz" :results silent
export KEY_NAME="k8s.cloudnative.nz"
export KEY_FP=$(gpg --list-secret-keys "${KEY_NAME}" | grep SCEAR -A1 | tail -1 | awk '{print $1}')
gpg --export --armor "${KEY_FP}" > ./.sops.pub.asc
#+end_src

** write SOPS config file
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz" :results silent
export KEY_NAME="k8s.cloudnative.nz"
export KEY_FP=$(gpg --list-secret-keys "${KEY_NAME}" | grep SCEAR -A1 | tail -1 | awk '{print $1}')
cat <<EOF > .sops.yaml
creation_rules:
  - path_regex: .*.yaml
    encrypted_regex: ^(data|stringData)$
    pgp: ${KEY_FP}
EOF
#+end_src

* Create .envrc
** Example
#+begin_src shell :tangle .envrc.example :tangle-mode (identity #o600)
# Just needs to be a secrets `pwgen 12` is fine
export CODER_DB_PASSWORD=
export CODER_PG_CONNECTION_URL=postgres://postgres:$CODER_DB_PASSWORD@coder-db-postgres.coder.svc.cluster.local:5432/coder?sslmode=disabled
# We Could set a GITHUB Token for coder, but not for now
# https://github.com/settings/personal-access-tokens/new
# https://github.com/settings/personal-access-tokens/1566846
export GITHUB_TOKEN=
# https://coder.com/docs/v2/latest/admin/auth
# https://github.com/organizations/cloudnative-nz/settings/applications/new
# https://github.com/organizations/cloudnative-nz/settings/applications/2247328
export CODER_OAUTH2_GITHUB_CLIENT_ID=
export CODER_OAUTH2_GITHUB_CLIENT_SECRET=
# https://coder.com/docs/v2/latest/admin/git-providers
# https://github.com/organizations/cloudnative-nz/settings/apps/new
# https://github.com/organizations/cloudnative-nz/settings/apps/space-cloudnative-nz
# NOTE: this is NOT the App ID, use Client ID
export CODER_GITAUTH_0_CLIENT_ID=
# NOTE: this is Client Secret
export CODER_GITAUTH_0_CLIENT_SECRET=
# We created a tsig key with DNS-UPDATE only for cloudnative.nz
export PDNS_API_KEY=
# I created a new project a key
# https://console.equinix.com/projects/0c218738-18c0-47b5-a404-beb59d9c6585/general
export METAL_PROJECT_ID=
# https://console.equinix.com/projects/0c218738-18c0-47b5-a404-beb59d9c6585/api-keys
export METAL_AUTH_TOKEN=
# OIDC with authentik deployed to sso.ii.nz
# https://sso.ii.nz/if/admin/#/core/applications/cloudnative-nz
# https://sso.ii.nz/if/admin/#/core/providers/2
export CODER_OIDC_CLIENT_ID=
export CODER_OIDC_CLIENT_SECRET=
#+end_src
** Save .envrc to .enc.envrc with sops
#+begin_src tmux :session "cluster:secret"
sops -e --input-type dotenv .envrc > .enc.envrc
#+end_src
* Create Kubernetes Secrets
** Save pdns TSIG key as a kubernetes secret
PDNS_TSIG_KEY needs to be set to the activated TSIG key with TSIG-ALLOW_DNSUPDATE
#+begin_src tmux :session "cluster:secret"
. .envrc
echo $PDNS_TSIG_KEY
kubectl create secret generic pdns \
    --namespace=cert-manager \
    --from-literal=key=$PDNS_TSIG_KEY \
    -o yaml \
    --dry-run=client > ./pdns-secret.yaml
sops --encrypt --in-place pdns-secret.yaml
#+end_src

** coder secret
Mostly we map the env vars directly.
#+begin_src tmux :session "cluster:secret"
. .envrc
kubectl create secret generic coder \
    --namespace=coder \
    --from-literal=PDNS_TSIG_KEY=$PDNS_TSIG_KEY \
    --from-literal=PDNS_API_KEY=$PDNS_API_KEY \
    --from-literal=GITHUB_TOKEN=$GITHUB_TOKEN \
    --from-literal=CODER_OAUTH2_GITHUB_CLIENT_ID=$CODER_OAUTH2_GITHUB_CLIENT_ID \
    --from-literal=CODER_OAUTH2_GITHUB_CLIENT_SECRET=$CODER_OAUTH2_GITHUB_CLIENT_SECRET \
    --from-literal=CODER_GITAUTH_0_CLIENT_ID=$CODER_GITAUTH_0_CLIENT_ID \
    --from-literal=CODER_GITAUTH_0_CLIENT_SECRET=$CODER_GITAUTH_0_CLIENT_SECRET \
    --from-literal=CODER_OIDC_CLIENT_ID=$CODER_OIDC_CLIENT_ID \
    --from-literal=CODER_OIDC_CLIENT_SECRET=$CODER_OIDC_CLIENT_SECRET \
    --from-literal=METAL_AUTH_TOKEN=$METAL_AUTH_TOKEN \
    --from-literal=password=$CODER_DB_PASSWORD \
    --from-literal=postgres-password=$CODER_DB_PASSWORD \
    --from-literal=CODER_PG_CONNECTION_URL="postgres://postgres:$CODER_DB_PASSWORD@coder-db-postgresql.coder.svc.cluster.local:5432/coder?sslmode=disable" \
    -o yaml --dry-run=client > ./coder-secret.yaml
#+end_src
** coder secret
Mostly we map the env vars directly.
#+begin_src tmux :session "cluster:secret"
sops --encrypt --in-place coder-secret.yaml
#+end_src
