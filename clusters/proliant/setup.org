# -*- org-return-follows-link: t; -*-
#+TITLE: space.cloudnative.nz
#+AUTHOR: Hippie Hacker
#+EMAIL: hh@ii.coop
#+DATE: 17th of July, 2023
#+PROPERTY: header-args:bash+ :results replace verbatim code output
#+PROPERTY: header-args:bash+ :var SPACEDOMAIN=(symbol-value 'space-domain)
#+NOPROPERTY: header-args:bash+ :var TSOCKET=(symbol-value 'tmux-socket)
#+PROPERTY: header-args:bash+ :dir (symbol-value 'tramp-dir)
#+PROPERTY: header-args:bash+ :wrap example
#+PROPERTY: header-args:bash+ :async
#+PROPERTY: header-args:shell+ :results replace verbatim code output
#+PROPERTY: header-args:shell+ :var SPACEDOMAIN=(symbol-value 'space-domain)
#+PROPERTY: header-args:shell+ :var KUBECONFIG=(concat (getenv "HOME") "/.kube/config-" space-domain)
#+NOPROPERTY: header-args:shell+ :var TSOCKET=(symbol-value 'tmux-socket)
#+PROPERTY: header-args:shell+ :async
#+NOPROPERTY: header-args:tmux+ :session "io:ssh"
#+NOPROPERTY: header-args:tmux+ :socket (symbol-value 'tmux-socket)
#+STARTUP: content
#+STARTUP: showeverything
#+STARTUP: overview
#+STARTUP: show2levels
* WWW
** Who?
ii.nz team
** What?
Configure a 10 year old HP Proliant DL360p Gen8, with 12 Intel Xeon E5-2640 CPUs @ 2.5GHz CPUs, 192GB Ram, and Several TB SSDs.
** Why?
We want to serve up fast and local services to Tauranga
** Where?
iimaginarium, Forest of Plenty, Bay of Plenty, New Zealand
** How?
Deploying Ubuntu + Kubernetes + flux + gitops + coder + some templates.
* Inventory
** Computer with Ubuntu
We configured our computer a static IP address (it may be dynamic, but we need to know it)
** Connectivity from internet TO our IP+Ubuntu
We will want to reach a few ports on our computer:
- 22 (ssh)
- 80 (http)
- 443 (https)
- 6443 (kubernetes)

You may need to figure out your own public ip by running:
*** What is my ip?
#+begin_src bash :sync
curl ifconfig.me
#+end_src

#+RESULTS:
#+begin_example
123.253.178.101
#+end_example

We know this works because we own the IPs, if you do this elsewhere, you may want to configure your home router to forward these ports via DMZ or similar to your Ubuntu box. It may have a local ip in the RFC1918 IP ranges (192.168.1.X being the most common)
** Domain
NS Records and a separate tsig key are configured on powerdns.ii.nz
#+name: spacedomain
#+begin_src bash :wrap "example" :sync :cache yes
echo -n $SPACEDOMAIN
#+end_src

#+RESULTS[c74d797bc2492484b0850b90b9116d5de2265105]: spacedomain
#+begin_example
cloudnative.nz
#+end_example

* Connect domain to our IP
** What is our IP?
#+begin_src bash :sync
curl -L https://ifconfig.me
#+end_src

#+RESULTS:
#+begin_example
123.253.178.101
#+end_example

** Add DOMAIN -> Address pointing our IP
We did this via the GUI, but here is the verified result.
#+name: add main A record
#+begin_src shell
dig A $SPACEDOMAIN +short
#+end_src

#+RESULTS: add main A record
#+begin_example
123.253.178.101
#+end_example

** Add *.DOMAIN -> Address pointing to our IP
#+name: add wildcard A record
#+begin_src shell
dig A random123.$SPACEDOMAIN +short
#+end_src

#+RESULTS: add wildcard A record
#+begin_example
123.253.178.101
#+end_example
* Verify DNS + SSH Connectivity
** ob-tmux
#+begin_src elisp
(ob-tmux--test)
#+end_src
** ssh root@cloudnative.nz
You should be able to login with your password (or ssh key)
#+begin_src tmux :prologue (concat "export SPACEDOMAIN=" space-domain "\n")
ssh root@$SPACEDOMAIN
#+end_src
** ssh-import-id to ensure Hippie, Stephen, and Zach Have access
#+begin_src tmux
ssh-import-id gh:hh gh:heyste gh:zachmandeville
#+end_src
* install
** ttyd tmux curl containerd
#+begin_src tmux
DEBIAN_FRONTENT=noninteractive apt-get install -y \
    -o Dpkg::Options::="--force-confdef" \
    -o Dpkg::Options::="--force-confold"  \
    ttyd \
    tmux \
    kitty-terminfo \
    containerd.io \
    curl \
    docker-ce \
    docker-ce-cli \
    kubelet \
    kubeadm \
    open-iscsi
#+end_src

** cilium
#+begin_src tmux
sudo su -
cd /tmp
curl -L --remote-name-all \
    https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz{,.sha256sum}
sha256sum --check cilium-linux-amd64.tar.gz.sha256sum
tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
rm cilium-linux-amd64.tar.gz cilium-linux-amd64.tar.gz.sha256sum
#+end_src
** flux
#+begin_src tmux
curl -s https://fluxcd.io/install.sh | bash
#+end_src
* configure starting kubernetes
** swap
*** disable swap
#+begin_src tmux
sudo swapoff /swapfile
#+end_src
*** remove swap from /etc/fstab
Swap will be remounted when we reboot, unless we remove it from the File System TAB.
#+begin_src tmux
sudo sed -i '/swapfile/d' /etc/fstab
#+end_src
*** Check results
Swap will be remounted when we reboot, unless we remove it from the File System TAB.
#+begin_src tmux
free -m
cat /etc/fstab
#+end_src
** containerd
Kubernetes needs systemdcgroup when using cilium
*** [[/ssh:root@cloudnative.nz:/etc/containerd/config.toml][/etc/containerd/config.toml]]
#+begin_src toml :tangle (concat tramp-dir "etc/containerd/config.toml")
version = 2
[plugins]
  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
    runtime_type = "io.containerd.runc.v2"
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
      SystemdCgroup = true
#+end_src
*** restart containerd w/ new config
#+begin_src bash :results silent :async
sudo systemctl restart containerd
#+end_src
** [[/ssh:root@cloudnative.nz:/etc/crictl.yaml][/etc/crictl.yaml]]
crictl needs to be confugured to use our containred socket. (It complains otherwise)
#+begin_src toml :tangle (concat tramp-dir "etc/crictl.yaml")
runtime-endpoint: unix:///var/run/containerd/containerd.sock
image-endpoint: unix:///var/run/containerd/containerd.sock
timeout: 10
debug: false
#+end_src
** [[/ssh:root@cloudnative.nz:/etc/kubernetes/kubeadm-config.yaml][/etc/kubernetes/kubeadm-config.yaml]]
*** Default Config
#+begin_src bash :wrap "src yaml"
kubeadm config print init-defaults
#+end_src

#+RESULTS:
#+begin_src yaml
apiVersion: kubeadm.k8s.io/v1beta3
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: abcdef.0123456789abcdef
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 1.2.3.4
  bindPort: 6443
nodeRegistration:
  criSocket: unix:///var/run/containerd/containerd.sock
  imagePullPolicy: IfNotPresent
  name: node
  taints: null
---
apiServer:
  timeoutForControlPlane: 4m0s
apiVersion: kubeadm.k8s.io/v1beta3
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controllerManager: {}
dns: {}
etcd:
  local:
    dataDir: /var/lib/etcd
imageRepository: registry.k8s.io
kind: ClusterConfiguration
kubernetesVersion: 1.27.0
networking:
  dnsDomain: cluster.local
  serviceSubnet: 10.96.0.0/12
scheduler: {}
#+end_src

*** My InitConfiguration
We need to disabled kube-proxy, and ensure we use the criSocket.
We will let cilium handle the kube-proxy aspects of the cluster
#+begin_src toml :tangle (concat tramp-dir "etc/kubernetes/kubeadm-config.yaml") :comments no
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
skipPhases:
  - addon/kube-proxy
nodeRegistration:
  taints: []
#+end_src
*** My ClusterConfiguration
Let's be sure our naming is specific to this cluster for Certs and DNS
#+begin_src toml :tangle (concat tramp-dir "etc/kubernetes/kubeadm-config.yaml") :comments no
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
clusterName: cloudnative.nz
kubernetesVersion: 1.27.3
controlPlaneEndpoint: "k8s.cloudnative.nz:6443"
apiServer:
  certSans:
    - "123.253.178.101"
    - "k8s.cloudnative.nz"
#+end_src
** [[/ssh:root@cloudnative.nz:/etc/kubernetes/cilium-values.yaml][/etc/kubernetes/cilium-values.yaml]]
These are the helm chart values for the 'kubeproxy-free' setup of Cilium
- [[https://docs.cilium.io/en/latest/network/kubernetes/kubeproxy-free/#quick-start][KubeProxy free Quickstart]]
- [[https://github.com/cilium/cilium/tree/v1.13.3/install/kubernetes/cilium#values][Cilium Helm Values Documentation]]
*** base config
#+begin_src yaml :tangle (concat tramp-dir "etc/kubernetes/cilium-values.yaml")
k8sServiceHost: k8s.cloudnative.nz
k8sServicePort: 6443
kubeProxyReplacement: strict
policyEnforcementMode: "never"
operator:
  replicas: 1
#+end_src
*** Enable Gateway API
I hear this is cool
#+begin_src yaml :tangle (concat tramp-dir "etc/kubernetes/cilium-values.yaml")
gatewayAPI:
  enabled: true
#+end_src
*** (dis)able IngressController
I'm really keen to try this out, but we need to find a way to set the following on the cilium-ingress:
#+begin_src yaml
externalIPs:
  - 192.168.1.145
loadBalancerIP: 192.168.1.145
#+end_src
Along with figuring out connectivity. fs
#+begin_src yaml :tangle (concat tramp-dir "etc/kubernetes/cilium-values.yaml")
ingressController:
  enabled: false
  service:
    # type: NodePort
    type: LoadBalancer
#+end_src
*** hubble
#+begin_src yaml :tangle (concat tramp-dir "etc/kubernetes/cilium-values.yaml")
hubble:
  enabled: true
  listenAddress: ":4244"
  metrics:
    enabled:
      - dns
      - drop
      - tcp
      - flow
      - port-distribution
      - icmp
      - http
  relay:
    enabled: true
  ui:
    enabled: true
#+end_src
* actually init and start kubernetes
** Pull down kubernetes container images
#+begin_src bash :sync
kubeadm config images pull
#+end_src

#+RESULTS:
#+begin_example
[config/images] Pulled registry.k8s.io/kube-apiserver:v1.27.3
[config/images] Pulled registry.k8s.io/kube-controller-manager:v1.27.3
[config/images] Pulled registry.k8s.io/kube-scheduler:v1.27.3
[config/images] Pulled registry.k8s.io/kube-proxy:v1.27.3
[config/images] Pulled registry.k8s.io/pause:3.9
[config/images] Pulled registry.k8s.io/etcd:3.5.7-0
[config/images] Pulled registry.k8s.io/coredns/coredns:v1.10.1
#+end_example

** Inspect kubernetes container images
#+begin_src bash :sync
sudo crictl images
#+end_src

** Initialize our cluster
#+begin_src tmux
echo sudo kubeadm init --config /etc/kubernetes/kubeadm-config.yaml
#+end_src
** Configure our KUBECONFIG
#+begin_src tmux
mkdir -p $HOME/.kube
sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
#+end_src
** wait for apiserver and untaint control plane
I don't think we need this anymore
#+begin_src tmux
until kubectl get --raw='/readyz?verbose'; do sleep 5; done
echo kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule-
#+end_src
** Gateway API
- https://isovalent.com/blog/post/tutorial-getting-started-with-the-cilium-gateway-api/
Looks like there's a new version at:
- https://gateway-api.sigs.k8s.io/guides/#install-standard-channel

#+begin_src tmux
kubectl apply -f \
    https://github.com/kubernetes-sigs/gateway-api/releases/download/v0.7.1/standard-install.yaml
#+end_src

#+RESULTS:
#+begin_example
customresourcedefinition.apiextensions.k8s.io/gatewayclasses.gateway.networking.k8s.io created
customresourcedefinition.apiextensions.k8s.io/gateways.gateway.networking.k8s.io created
customresourcedefinition.apiextensions.k8s.io/httproutes.gateway.networking.k8s.io created
customresourcedefinition.apiextensions.k8s.io/referencegrants.gateway.networking.k8s.io created
namespace/gateway-system created
validatingwebhookconfiguration.admissionregistration.k8s.io/gateway-api-admission created
service/gateway-api-admission-server created
deployment.apps/gateway-api-admission-server created
serviceaccount/gateway-api-admission created
clusterrole.rbac.authorization.k8s.io/gateway-api-admission created
clusterrolebinding.rbac.authorization.k8s.io/gateway-api-admission created
role.rbac.authorization.k8s.io/gateway-api-admission created
rolebinding.rbac.authorization.k8s.io/gateway-api-admission created
job.batch/gateway-api-admission created
job.batch/gateway-api-admission-patch created
#+end_example

** cni: cilium
#+begin_src tmux
helm repo add cilium https://helm.cilium.io/
helm upgrade --install cilium cilium/cilium \
    --version 1.13.4 \
    --namespace kube-system \
    -f /etc/kubernetes/cilium-values.yaml
#+end_src
** wait for our node to be Ready
Cluster should be up at this point
#+begin_src tmux
kubectl wait --for=condition=Ready \
    --selector=node-role.kubernetes.io/control-plane="" \
    --timeout=120s node
#+end_src
** copy our kubeconfig local
#+begin_src shell :sync :results silent
scp root@$SPACEDOMAIN:/etc/kubernetes/admin.conf $KUBECONFIG
#+end_src

* Bootstrap Fux + Sops Encryption
** generate a github TOKEN
https://github.com/settings/tokens/new
https://github.com/settings/personal-access-tokens/new
Make sure it's for the right organization
- Administration :: Access: Read and write
- Contents :: Access: Read and write
- Metadata :: Access: Read-only

** setup gh cli and authenticate
#+begin_src tmux
sudo apt-get install gh
#+end_src
** bootstrap flux
This needs to be done to the correct folder, owner, and repo...
#+begin_src shell :noeval
flux bootstrap github --owner=cloudnative-nz --repository=infra --path=clusters/proliant
#+end_src
#+begin_example
? What account do you want to log into? GitHub.com
? What is your preferred protocol for Git operations? HTTPS
? Authenticate Git with your GitHub credentials? Yes
? How would you like to authenticate GitHub CLI?  [Use arrows to move, type to filter]
  Login with a web browser
> Paste an authentication token
#+end_example
** TODO at this point check out the repo and put this file into ./clusters/thinkpad/ or similar
#+begin_src tmux
git clone git@github.com:cloudnative-nz/infra
cp this.org infra/clusters/NEW/setup.org
#+end_src
** Setup SOPS + Flux
*** install sops binary
**** linux
#+begin_src tmux
wget https://github.com/getsops/sops/releases/download/v3.7.3/sops_3.7.3_amd64.deb
sudo dpkg -i sops_*deb
rm sops_*deb
#+end_src
**** mac
#+begin_src bash
brew install gnupg sops
#+end_src
*** generate gpg key
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz" :sync :results silent
export KEY_NAME="k8s.cloudnative.nz"
export KEY_COMMENT="flux secrets"

gpg --batch --full-generate-key <<EOF
%no-protection
Key-Type: 1
Key-Length: 4096
Subkey-Type: 1
Subkey-Length: 4096
Expire-Date: 0
Name-Comment: ${KEY_COMMENT}
Name-Real: ${KEY_NAME}
EOF
#+end_src

*** list gpg keys
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz" :sync
export KEY_NAME="k8s.cloudnative.nz"
gpg --list-secret-keys "${KEY_NAME}"
#+end_src

#+RESULTS:
#+begin_example
sec   rsa4096 2023-06-30 [SCEAR]
      7753811D61BD7B2F83C55F3299211032AFAC5FD8
uid           [ultimate] k8s.cloudnative.nz (flux secrets)
ssb   rsa4096 2023-06-30 [SEAR]

#+end_example

*** import into kubernetes
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz" :sync
export KEY_NAME="k8s.cloudnative.nz"
export KEY_FP=$(gpg --list-secret-keys "${KEY_NAME}" | grep SCEA -A1 | tail -1 | awk '{print $1}')
kubectl delete secret sops-gpg --namespace=flux-system || true
gpg --export-secret-keys --armor "${KEY_FP}" |
kubectl create secret generic sops-gpg \
--namespace=flux-system \
--from-file=sops.asc=/dev/stdin
#+end_src

#+RESULTS:
#+begin_example
secret "sops-gpg" deleted
secret/sops-gpg created
#+end_example

*** export key into git
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz" :results silent :sync
export KEY_NAME="k8s.cloudnative.nz"
export KEY_FP=$(gpg --list-secret-keys "${KEY_NAME}" | grep SCEA -A1 | tail -1 | awk '{print $1}')
# gpg --export --armor "${KEY_FP}" > ./clusters/thinkpad/.sops.pub.asc
gpg --export --armor "${KEY_FP}" > .sops.pub.asc
#+end_src

*** write SOPS config file
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz" :results silent :sync
export KEY_NAME="k8s.cloudnative.nz"
export KEY_FP=$(gpg --list-secret-keys "${KEY_NAME}" | grep SCEA -A1 | tail -1 | awk '{print $1}')
cat <<EOF >> ./.sops.yaml
creation_rules:
  - path_regex: .*.yaml
    encrypted_regex: ^(data|stringData)$
    pgp: ${KEY_FP}
EOF
#+end_src
* PDNS TSIG Secret
https://github.com/zachomedia/cert-manager-webhook-pdns#powerdns-cert-manager-acme-webhook
Create one here with only access to cloudnative.nz
https://powerdns.ii.nz/admin/manage-keys
** cert-manager
*** create rfc2136 secret
Note that the TSIG_KEY we retrieve is base64 encoded... it get's double encoded as a kubernetes secret. Most places you use a TSIG_KEY are expecting the base64 value we have here.
#+begin_src shell :epilogue "\n) 2>&1\n:\n" :prologue "(\nexport KUBECONFIG\n" :sync :results silent
source .envrc
kubectl -n cert-manager \
    create secret generic rfc2136 \
    --from-literal="$PDNS_TSIG_KEYNAME"="$PDNS_TSIG_KEY" \
    --dry-run=client -o yaml > \
     ./secrets/cert-manager-rfc2136.yaml
#+end_src

*** encrypt rfc2136 secret
We need to encrypt the pdns-secret with sops and commit/push so flux can decrypt and apply it
#+begin_src shell :epilogue "\n) 2>&1\n:\n" :prologue "(\n" :results silent :sync
sops --encrypt --in-place ./secrets/cert-manager-rfc2136.yaml
#+end_src

** external-dns
*** create rfc2136 secret
Note that the TSIG_KEY we retrieve is base64 encoded... it get's double encoded as a kubernetes secret. Most places you use a TSIG_KEY are expecting the base64 value we have here.
#+begin_src shell :epilogue "\n) 2>&1\n:\n" :prologue "(\nexport KUBECONFIG\n" :sync :results silent
source .envrc
kubectl -n external-dns \
    create secret generic rfc2136 \
    --from-literal="$PDNS_TSIG_KEYNAME"="$PDNS_TSIG_KEY" \
    --dry-run=client -o yaml > \
    ./secrets/external-dns-rfc2136.yaml
#+end_src

*** encrypt rfc2136 secret
We need to encrypt the pdns-secret with sops and commit/push so flux can decrypt and apply it
#+begin_src shell :epilogue "\n) 2>&1\n:\n" :prologue "(\n" :results silent :sync
sops --encrypt --in-place ./secrets/external-dns-rfc2136.yaml
#+end_src

* TODO gitops
** dashboard
*** ensure GITOPS_PASSWORD is set
#+begin_src bash :sync :dir . :results silent
. .envrc
gitops create dashboard ww-gitops \
  --password=$GITOPS_PASSWORD \
  --export > .../gitops-dashboard.yaml
#+end_src

*** ensure github
#+begin_src bash :sync :dir . :results silent
. .envrc
gitops create dashboard ww-gitops \
  --password=$GITOPS_PASSWORD \
  --export > ./gitops-dashboard.yaml
#+end_src
** reciever
*** setup webhook
https://github.com/cloudnative-nz/infra/settings/hooks/new
**** generate HMAC
#+name: new_hmac
#+begin_src shell :sync
TOKEN=$(head -c 12 /dev/urandom | shasum | cut -d ' ' -f1)
echo export FLUX_RECEIVER_TOKEN=$TOKEN >> .envrc
#+end_src

**** check env
#+begin_src bash :sync :dir . :results silent
. .envrc
echo $FLUX_RECEIVER_TOKEN
#+end_src

**** create receiven-token secrets
#+begin_src bash :epilogue "\n) 2>&1\n:\n" :prologue "(\nexport KUBECONFIG\n" :results silent :dir . :sync
. .envrc
KUBECONFIG=~/.kube/config-cloudnative.nz
export KUBECONFIG
kubectl -n flux-system create secret \
    --dry-run=client -o yaml \
    generic receiver-token \
    --from-literal=token=$FLUX_RECEIVER_TOKEN > ./secrets/flux-receiver.yaml
#+end_src
*** encrypt and commit TSIG secret
We need to encrypt the secret with sops and commit/push so flux can decrypt and apply it
#+begin_src bash :epilogue "\n) 2>&1\n:\n" :prologue "(\nexport KUBECONFIG\n" :results silent :dir . :sync
sops --encrypt --in-place ./secrets/flux-receiver.yaml
#+end_src

*** get the ingress
#+begin_src bash :epilogue "\n) 2>&1\n:\n" :prologue "(\nexport KUBECONFIG\n" :dir . :sync
kubectl -n flux-system get ingress webhook-receiver
#+end_src

#+RESULTS:
#+begin_example
NAME               CLASS   HOSTS                         ADDRESS           PORTS     AGE
webhook-receiver   nginx   flux-webhook.cloudnative.nz   123.253.178.101   80, 443   4m26s
#+end_example

*** get the hook path
We need to encrypt the secret with sops and commit/push so flux can decrypt and apply it
#+begin_src bash :epilogue "\n) 2>&1\n:\n" :prologue "(\nexport KUBECONFIG\n" :dir . :sync
kubectl -n flux-system get receiver
#+end_src

#+RESULTS:
#+begin_example
NAME              AGE     READY   STATUS
github-receiver   3m47s   True    Receiver initialized for path: /hook/e698be0afc8e5e2cc3c9d8780fc955309a55e3b692ed5110e9e1d8f639d0b1ab
#+end_example
*** combine them into something like
Use the Secret and this PayloadURL to create a new webook:
[[https://github.com/cloudnative-nz/infra/settings/hooks/new]]
#+begin_src bash :epilogue "\n) 2>&1\n:\n" :prologue "(\nexport KUBECONFIG\n" :dir . :sync
echo PayloadURL: https://$(kubectl -n flux-system get ingress webhook-receiver -o jsonpath="{.spec.rules[0].host}")$(kubectl -n flux-system get receiver github-receiver -o jsonpath="{.status.webhookPath}")
#+end_src

#+RESULTS:
#+begin_example
PayloadURL: https://flux-webhook.cloudnative.nz/hook/e698be0afc8e5e2cc3c9d8780fc955309a55e3b692ed5110e9e1d8f639d0b1ab
#+end_example
*** current hook
* Footnotes
Old
** Setup SOPS + Flux
*** sops binary
**** linux
#+begin_src shell
wget https://github.com/getsops/sops/releases/download/v3.7.3/sops_3.7.3_amd64.deb
dpkg -i sops_*deb
rm sops_*deb
#+end_src
**** mac
#+begin_src shell
brew install gnupg sops
#+end_src
*** generate gpg key
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz"
export KEY_NAME="k8s.cloudnative.nz"
export KEY_COMMENT="flux secrets"

gpg --batch --full-generate-key <<EOF
%no-protection
Key-Type: 1
Key-Length: 4096
Subkey-Type: 1
Subkey-Length: 4096
Expire-Date: 0
Name-Comment: ${KEY_COMMENT}
Name-Real: ${KEY_NAME}
EOF
#+end_src

#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz"
export KEY_NAME="k8s.cloudnative.nz"
gpg --list-secret-keys "${KEY_NAME}"
#+end_src

#+end_example
*** import into kubernetes
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz"
export KEY_NAME="k8s.cloudnative.nz"
export KEY_FP=$(gpg --list-secret-keys "${KEY_NAME}" | grep SCEAR -A1 | tail -1 | awk '{print $1}')
gpg --export-secret-keys --armor "${KEY_FP}" |
kubectl create secret generic sops-gpg \
--namespace=flux-system \
--from-file=sops.asc=/dev/stdin
#+end_src

#+RESULTS:
#+begin_example
secret/sops-gpg created
#+end_example
*** export key into git
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz" :results silent
export KEY_NAME="k8s.cloudnative.nz"
export KEY_FP=$(gpg --list-secret-keys "${KEY_NAME}" | grep SCEAR -A1 | tail -1 | awk '{print $1}')
gpg --export --armor "${KEY_FP}" > ./.sops.pub.asc
#+end_src

*** write SOPS config file
#+begin_src shell :env KEY_NAME="k8s.cloudnative.nz" :results silent
export KEY_NAME="k8s.cloudnative.nz"
export KEY_FP=$(gpg --list-secret-keys "${KEY_NAME}" | grep SCEAR -A1 | tail -1 | awk '{print $1}')
cat <<EOF > .sops.yaml
creation_rules:
  - path_regex: .*.yaml
    encrypted_regex: ^(data|stringData)$
    pgp: ${KEY_FP}
EOF
#+end_src

https://fluxcd.io/flux/guides/mozilla-sops/#prerequisites
** Create .envrc
*** Example
#+begin_src shell :tangle .envrc.example :tangle-mode (identity #o600)
# Just needs to be a secrets `pwgen 12` is fine
export CODER_DB_PASSWORD=
export CODER_PG_CONNECTION_URL=postgres://postgres:$CODER_DB_PASSWORD@coder-db-postgres.coder.svc.cluster.local:5432/coder?sslmode=disabled
# We Could set a GITHUB Token for coder, but not for now
# https://github.com/settings/personal-access-tokens/new
# https://github.com/settings/personal-access-tokens/1566846
export GITHUB_TOKEN=
# https://coder.com/docs/v2/latest/admin/auth
# https://github.com/organizations/cloudnative-nz/settings/applications/new
# https://github.com/organizations/cloudnative-nz/settings/applications/2247328
export CODER_OAUTH2_GITHUB_CLIENT_ID=
export CODER_OAUTH2_GITHUB_CLIENT_SECRET=
# https://coder.com/docs/v2/latest/admin/git-providers
# https://github.com/organizations/cloudnative-nz/settings/apps/new
# https://github.com/organizations/cloudnative-nz/settings/apps/space-cloudnative-nz
# NOTE: this is NOT the App ID, use Client ID
export CODER_GITAUTH_0_CLIENT_ID=
# NOTE: this is Client Secret
export CODER_GITAUTH_0_CLIENT_SECRET=
# We created a tsig key with DNS-UPDATE only for cloudnative.nz
export PDNS_API_KEY=
# I created a new project a key
# https://console.equinix.com/projects/0c218738-18c0-47b5-a404-beb59d9c6585/general
export METAL_PROJECT_ID=
# https://console.equinix.com/projects/0c218738-18c0-47b5-a404-beb59d9c6585/api-keys
export METAL_AUTH_TOKEN=
# OIDC with authentik deployed to sso.ii.nz
# https://sso.ii.nz/if/admin/#/core/applications/cloudnative-nz
# https://sso.ii.nz/if/admin/#/core/providers/2
export CODER_OIDC_CLIENT_ID=
export CODER_OIDC_CLIENT_SECRET=
#+end_src
*** Save .envrc to .enc.envrc with sops
#+begin_src tmux :session "cluster:secret"
sops -e --input-type dotenv .envrc > .enc.envrc
#+end_src
** Create Kubernetes Secrets
*** Save pdns TSIG key as a kubernetes secret
PDNS_TSIG_KEY needs to be set to the activated TSIG key with TSIG-ALLOW_DNSUPDATE
#+begin_src tmux :session "cluster:secret"
. .envrc
echo $PDNS_TSIG_KEY
kubectl create secret generic pdns \
    --namespace=cert-manager \
    --from-literal=key=$PDNS_TSIG_KEY \
    -o yaml \
    --dry-run=client > ./pdns-secret.yaml
sops --encrypt --in-place pdns-secret.yaml
#+end_src

*** coder secret
Mostly we map the env vars directly.
#+begin_src tmux :session "cluster:secret"
. .envrc
kubectl create secret generic coder \
    --namespace=coder \
    --from-literal=PDNS_TSIG_KEY=$PDNS_TSIG_KEY \
    --from-literal=PDNS_API_KEY=$PDNS_API_KEY \
    --from-literal=GITHUB_TOKEN=$GITHUB_TOKEN \
    --from-literal=CODER_OAUTH2_GITHUB_CLIENT_ID=$CODER_OAUTH2_GITHUB_CLIENT_ID \
    --from-literal=CODER_OAUTH2_GITHUB_CLIENT_SECRET=$CODER_OAUTH2_GITHUB_CLIENT_SECRET \
    --from-literal=CODER_GITAUTH_0_CLIENT_ID=$CODER_GITAUTH_0_CLIENT_ID \
    --from-literal=CODER_GITAUTH_0_CLIENT_SECRET=$CODER_GITAUTH_0_CLIENT_SECRET \
    --from-literal=CODER_OIDC_CLIENT_ID=$CODER_OIDC_CLIENT_ID \
    --from-literal=CODER_OIDC_CLIENT_SECRET=$CODER_OIDC_CLIENT_SECRET \
    --from-literal=METAL_AUTH_TOKEN=$METAL_AUTH_TOKEN \
    --from-literal=password=$CODER_DB_PASSWORD \
    --from-literal=postgres-password=$CODER_DB_PASSWORD \
    --from-literal=CODER_PG_CONNECTION_URL="postgres://postgres:$CODER_DB_PASSWORD@coder-db-postgresql.coder.svc.cluster.local:5432/coder?sslmode=disable" \
    -o yaml --dry-run=client > ./coder-secret.yaml
#+end_src
*** coder secret
Mostly we map the env vars directly.
#+begin_src tmux :session "cluster:secret"
sops --encrypt --in-place coder-secret.yaml
#+end_src
** Variables
# Local Variables:
# space-domain: "cloudnative.nz"
# tramp-dir: "/ssh:root@cloudnative.nz:/"
# eval: (setq org-babel-tmux-terminal "kitty")
# eval: (setq org-babel-tmux-terminal-opts '("--hold"))
# End:
